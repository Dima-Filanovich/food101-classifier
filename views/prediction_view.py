import streamlit as st
import pandas as pd
import altair as alt
from PIL import Image

# –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
CLASS_NAMES = [
    'apple_pie', 'baby_back_ribs', 'baklava', 'beef_carpaccio', 'beef_tartare',
    'beet_salad', 'beignets', 'bibimbap', 'bread_pudding', 'breakfast_burrito',
    'bruschetta', 'caesar_salad', 'cannoli', 'caprese_salad', 'carrot_cake',
    'ceviche', 'cheesecake', 'cheese_plate', 'chicken_curry', 'chicken_quesadilla',
    'chicken_wings', 'chocolate_cake', 'chocolate_mousse', 'churros', 'clam_chowder',
    'club_sandwich', 'crab_cakes', 'creme_brulee', 'croque_madame', 'cup_cakes',
    'deviled_eggs', 'donuts', 'dumplings', 'edamame', 'eggs_benedict',
    'escargots', 'falafel', 'filet_mignon', 'fish_and_chips', 'foie_gras',
    'french_fries', 'french_onion_soup', 'french_toast', 'fried_calamari', 'fried_rice',
    'frozen_yogurt', 'garlic_bread', 'gnocchi', 'greek_salad', 'grilled_cheese_sandwich',
    'grilled_salmon', 'guacamole', 'gyoza', 'hamburger', 'hot_and_sour_soup',
    'hot_dog', 'huevos_rancheros', 'hummus', 'ice_cream', 'lasagna',
    'lobster_bisque', 'lobster_roll_sandwich', 'macaroni_and_cheese', 'macarons', 'miso_soup',
    'mussels', 'nachos', 'omelette', 'onion_rings', 'oysters',
    'pad_thai', 'paella', 'pancakes', 'panna_cotta', 'peking_duck',
    'pho', 'pizza', 'pork_chop', 'poutine', 'prime_rib',
    'pulled_pork_sandwich', 'ramen', 'ravioli', 'red_velvet_cake', 'risotto',
    'samosa', 'sashimi', 'scallops', 'seaweed_salad', 'shrimp_and_grits',
    'spaghetti_bolognese', 'spaghetti_carbonara', 'spring_rolls', 'steak', 'strawberry_shortcake',
    'sushi', 'tacos', 'takoyaki', 'tiramisu', 'tuna_tartare',
    'waffles'
]


def show_upload_section():
    st.title("üçΩÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –µ–¥—ã ‚Äî Food101")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞, –∏ –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ~73%")
    with st.expander("üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –º–æ–¥–µ–ª—å"):
        st.markdown(", ".join(f"`{c.replace('_', ' ').title()}`" for c in CLASS_NAMES))

    uploaded_file = st.file_uploader("üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])
    return uploaded_file

def show_image(image: Image.Image):
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

def show_predictions(top_classes, confidences):
    st.subheader("üîù –¢–æ–ø-3 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    for name, conf in zip(top_classes, confidences):
        st.write(f"{name}: {conf:.2%}")

    df = pd.DataFrame({"–ë–ª—é–¥–æ": top_classes, "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": confidences})
    chart = alt.Chart(df).mark_bar().encode(
        x=alt.X("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:Q", axis=alt.Axis(format=".0%")),
        y=alt.Y("–ë–ª—é–¥–æ:N", sort='-x'),
        color=alt.Color("–ë–ª—é–¥–æ:N", legend=None)
    ).properties(height=150)
    st.altair_chart(chart, use_container_width=True)

def show_prediction_result(predicted_class, confidence):
    if confidence < 0.5:
        st.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}). –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ—á–Ω–æ. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: **{predicted_class}**")
    else:
        st.success(f"üçΩÔ∏è –≠—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ: **{predicted_class}** ({confidence:.2%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)")

def show_nutrition_info(nutrition_info, predicted_class, product_name_ru):
    st.subheader("üß™ –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥):")
    st.write(f"**–ö–∞–ª–æ—Ä–∏–∏:** {nutrition_info['energy_kcal']} –∫–∫–∞–ª")
    st.write(f"**–ë–µ–ª–∫–∏:** {nutrition_info['proteins']} –≥")
    st.write(f"**–ñ–∏—Ä—ã:** {nutrition_info['fat']} –≥")
    st.write(f"**–£–≥–ª–µ–≤–æ–¥—ã:** {nutrition_info['carbohydrates']} –≥")

    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:** {product_name_ru}")

    if nutrition_info.get("url"):
        st.markdown(f"[üìé –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ Open Food Facts]({nutrition_info['url']})")

def show_download_report(report):
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
        data=report,
        file_name="food_prediction_report.pdf",
        mime="application/pdf"
    )

def show_no_nutrition_warning():
    st.warning("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

